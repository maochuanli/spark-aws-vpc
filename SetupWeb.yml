---

# playbook to set up the apache EC2 instance

# 1, Install Python
- name: Make sure Python is installed on target machine
  hosts: all
  gather_facts: false
  become: yes
  tasks:
  - name: Show current Domain Name given
    debug:
      var: domain_host_name

  - name: Install Python
    raw: sudo apt-get install -y python

# 2, Set up DNS record in godaddy.com
- name: Update DNS record for this EC2 instance
  hosts: all
  gather_facts: false
  tasks:
  - name: Show current host name
    debug:
      var: inventory_hostname

  - name: run curl command to update DNS record
    shell: |
      echo "IP is: {{inventory_hostname}}"
      curl -X PUT https://api.godaddy.com/v1/domains/{{domain_host_name}}/records/A/@ -H 'Authorization: sso-key {{go_daddy_key}}:{{go_daddy_secret}}' -H 'Content-Type: application/json' --data '[{"type": "A","name": "@","data": "{{inventory_hostname}}","ttl": 3600}]'
    args:
      executable: /bin/bash

  - name: run curl command to read DNS record data back
    shell: |
      curl -X GET https://api.godaddy.com/v1/domains/{{domain_host_name}}/records/A/@ -H 'Authorization: sso-key {{go_daddy_key}}:{{go_daddy_secret}}' -H 'Content-Type: application/json'
    args:
      executable: /bin/bash
    register: out

  - name: Show command output
    debug: var=out.stdout

  - name: Show command output
    debug:
      msg: "Successfully updated the DNS record"
    when:
      out.stdout is search(inventory_hostname)
  - name: Show failure message
    fail:
      msg: "The DNS record is NOT updated!!!"
    when: inventory_hostname not in out.stdout


# 3, Change the host name
- name: Change Hostname with the given Domain Name
  hosts: all
  gather_facts: false
  become: yes
  tasks:
  - name: Change host name of the EC2 instance
    shell: |
      echo "{{ domain_host_name }}" > /etc/hostname
    args:
      executable: /bin/bash

  - name: Change host name in /etc/hosts
    lineinfile:
      path: /etc/hosts
      line: '127.0.0.1 {{ domain_host_name }}'

  - name: Rebooting ...
    shell: sleep 3 && shutdown -r now
    async: 1
    poll: 0
    ignore_errors: true

  - name: Wait for system to become reachable again
    wait_for_connection:
      delay: 20
      timeout: 300

# 4, Install required system packages
- name: Install System packages
  hosts: all
  gather_facts: false
  become: yes
  tasks:
  - name: Install Apache and relevant packages
    shell: |
      export LC_ALL=C
      apt-get update
      apt-get install software-properties-common
      add-apt-repository ppa:certbot/certbot -y
      apt-get update
      apt-get install -y apache2 apache2-bin apache2-data apache2-utils ssl-cert python3-pip python-certbot-apache libapache2-mod-wsgi-py3 unzip
      pip3 install django boto3
      a2enmod wsgi ssl rewrite
    args:
      executable: /bin/bash

# 5, Configure Apache and Upload Webapp
- name: Configure Apache with WSGi configuration
  hosts: all
  gather_facts: false
  become: yes
  tasks:
  - name: for wsgi.conf
    copy:
      content: |
        WSGIScriptAlias / /home/ubuntu/spark-web/spark/wsgi.py
        WSGIPythonPath /home/ubuntu/spark-web

        <Directory /home/ubuntu/spark-web/spark>
        <Files wsgi.py>
        Require all granted
        </Files>
        </Directory>
      dest: /etc/apache2/conf-available/wsgi.conf
      owner: www-data
      group: www-data
      mode: 0644

  - name: Enable the wsgi configuration for apache
    shell: |
      a2enconf wsgi
    args:
      executable: /bin/bash

  - name: Extract the webapp zip file into /home/ubuntu/spark-web
    unarchive:
      src: "{{ webapp_download_url }}"
      remote_src: yes
      dest: /home/ubuntu

  - name: Move spark-aws-webapp-master directory to spark-web
    shell: |
      rm -rf /home/ubuntu/spark-web*
      mv /home/ubuntu/spark-aws-webapp* /home/ubuntu/spark-web
      chown -R www-data:www-data /home/ubuntu/spark-web

  - name: Override the aws.ini file with correct credentials
    blockinfile:
      path: /home/ubuntu/spark-web/aws.ini
      content: |
        [DEFAULT]
        aws_access_key={{aws_access_key}}
        aws_secret_key={{aws_secret_key}}
        bucket_name={{vpc_bucket_name}}

# 6, Set up certbot service to support HTTPS protocal
- name: Obtain a temporary certificate and install it into apache configuration
  hosts: all
  gather_facts: false
  become: yes
  tasks:
  - name: run system command to add certbot repository and install it
    shell: |
      certbot --apache run -d {{domain_host_name}} -m mao.chuan.li@gmail.com --agree-tos -n
    args:
      executable: /bin/bash
    register: out

  - name: Show certbot --apache run .... command output
    debug: var=out.stdout

  - name: insert rewrite http to https configuration
    blockinfile:
      path: /etc/apache2/sites-available/000-default.conf
      insertbefore: "</VirtualHost>"
      content: |
        RewriteEngine on
        RewriteCond %{SERVER_NAME} ={{domain_host_name}}
        RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]

  - name: restart apache to reflect the new certificate change
    systemd:
      name: apache2
      state: restarted